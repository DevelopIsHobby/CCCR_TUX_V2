# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: BuildAndPushImages

#main에 푸쉬된 경우 action.yml에 작성한 내용 수행
on:
  push:
    branches:
      - main

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_REPO: mskim6518/argocd-k8s-v2
  VERSION : 0.0.1
  DB_HOST: 192.168.56.10  # 외부 MySQL IP 주소
  DB_USER: weather
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}  # 비밀번호를 secrets로 관리

jobs:
  ci_cd_pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: source code checkout
        # uses의 경우 Marketplace에 사전 정의된 내용을 이용하여 step 수행 
        uses: actions/checkout@v3
        
        # JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Start MySQL Server
        uses: mirromutth/mysql-action@v1.1
        with:
          host port: 3306
          container port: 3306
          mysql database: 'weather'  # 사용할 데이터베이스 이름
          mysql user: 'weather'  # 사용자 이름
          mysql password: ${{ secrets.DB_PASSWORD }}  # 비밀번호를 시크릿으로 설정

        # gradle 파일 실행을 위한 권한 설정
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
        # Gradle을 이용해 빌드 진행
      - name: Build with Gradle
        run: ./gradlew build
        

        # 도커허브 로그인
      - name: Log in to Docker hub
        uses: docker/login-action@v1
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: 서버 이미지 빌드 및 푸시
        id: build_and_push_server
        # run의 경우 직접 기재한 커맨드 수행 
        # 도커허브에 weather-${{ version }}으로 저장 
        run: |
           docker build --platform linux/arm64 -f Dockerfile -t ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_REPO }}:tuxtalk-${{ env.VERSION }}-${{ github.run_number }} .
           docker push ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_REPO }}:tuxtalk-${{ env.VERSION }}-${{ github.run_number }}
      
